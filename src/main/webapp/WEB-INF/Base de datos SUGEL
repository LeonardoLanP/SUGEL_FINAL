CREATE DATABASE sugel;
use sugel;

CREATE TABLE rol(
id_rol int auto_increment not null,
type_user varchar(45) not null,
constraint pk_rol  primary key(id_rol)
);

CREATE TABLE user(
ID_user int auto_increment not null,
user varchar(30) not null,
email varchar(45) not null,
pass varchar(256) not null,
user_status INT not null,
Rol_id int not null,
constraint pk_user primary key(id_user),
constraint fk_user_rol foreign key(Rol_id)
References rol(id_rol)
);

CREATE TABLE person (
ID_person int auto_increment not null,
name varchar(45) not null,
lastname1 varchar(45) not null,
lastname2 varchar(45) not null,
curp varchar(18) not null unique,
User_id int not null,
constraint pk_person primary key(id_person),
constraint fk_person_user foreign key(user_id)
References user(id_user),
 constraint uK_person unique key(curp)
);

CREATE TABLE subject(
id_sub int auto_increment not null,
grade char(3) not null,
groupSub char(3) not null,
subname varchar(60) not null,
statusub INT  not null,
constraint pk_subject primary key(id_sub)
);

CREATE TABLE user_sub(
id_user_sub int auto_increment not null,
user_id int not null,
sub_id int not null,
constraint pk_user_sub primary key(id_user_sub),
constraint fk_user_sub_user
foreign key(user_id)
references user(id_user),
constraint fk_user_sub_subject
foreign key(sub_id)
References subject(id_sub)
);


CREATE TABLE exam (
id_exam int auto_increment not null,
code varchar(16) not null,
grade varchar(4) not null,
statusex INT not null,
dateex date,
user_sub_id int not null,
namex varchar(60) not null,
constraint pk_examen primary key(id_exam),
constraint fk_exam_user_subject
foreign key(user_sub_id)
references user_sub(id_user_sub)
);




CREATE TABLE question(
id_ques int auto_increment not null,
question varchar(256) not null,
type_question varchar(30) not null,
constraint pk_question primary key(id_ques)
);

CREATE TABLE answer (
id_answer int auto_increment not null,
answer varchar(256) not null,
constraint pk_answer primary key(id_answer)
);

CREATE TABLE exam_question_answer(
id_exam_question int auto_increment not null,
exam_id int not null,
ques_id int not null,
answer_id int not null,
open_Answer varchar(256),

constraint pk_exam_question_answer primary key(id_exam_question),
constraint fk_exam_question_answer_exam
foreign key(exam_id)
references exam(id_exam),
constraint fk_exam_question_answer_question
foreign key(ques_id)
references question(id_ques),
constraint fk_exam_question_answer_answer
foreign key(answer_id)
references answer(id_answer)
);


-- PROCEDIMIENTOS ALMACENADOS

-- PREGUNTA
DELIMITER //
CREATE PROCEDURE InsertQuestion (
  IN questionp VARCHAR(256),
  IN type_questionp VARCHAR(30)
)
BEGIN
  INSERT INTO question (question, type_question)
  VALUES (questionp, type_questionp);
END //
DELIMITER ;

-- RESPUESTA

DELIMITER //
CREATE PROCEDURE InsertAnswer(
IN answerp VARCHAR(256)
)
BEGIN
INSERT INTO answer(answer)
VALUES(answerp);
END //
DELIMITER ;




-- TRIGGERS

-- FECHA

DELIMITER //

CREATE TRIGGER dateexam
BEFORE INSERT ON exam
FOR EACH ROW
BEGIN
    SET NEW.dateex = SYSDATE();
END //

DELIMITER ;


-- CALIFICACION
DELIMITER //

CREATE TRIGGER gradet
BEFORE update ON exam
FOR EACH ROW
BEGIN
    IF (NEW.grade >= 9.9 AND NEW.grade <= 10) THEN
        SET NEW.grade = 'AU';
    ELSEIF (NEW.grade >= 9 AND NEW.grade <= 9.8) THEN
        SET NEW.grade = 'DE';
    ELSEIF (NEW.grade >= 8 AND NEW.grade <= 8.9) THEN
        SET NEW.grade = 'SA';
	ELSEIf (NEW.grade <=7.9 AND NEW.grade >= 0 ) Then
		Set NEW.grade='NA';
    ELSE
        SET NEW.grade = 'SC';
    END IF;
END //
DELIMITER ;

-- codigo



DELIMITER //
CREATE TRIGGER generate_code
BEFORE INSERT ON exam
FOR EACH ROW
BEGIN
    DECLARE code_exists INT;
    DECLARE new_code VARCHAR(6);

    SET new_code = SUBSTRING(MD5(RAND()), 1, 6);
    SET code_exists = (SELECT COUNT(*) FROM exam WHERE code = new_code);

    WHILE code_exists > 0 DO
        SET new_code = SUBSTRING(MD5(RAND()), 1, 6);
        SET code_exists = (SELECT COUNT(*) FROM exam WHERE code = new_code);
    END WHILE;
    SET NEW.code = new_code;
END //
DELIMITER ;

insert into sugel.rol values(1,"admin");
insert into sugel.rol values(2,"docente");
insert into sugel.rol values(3,"estudiante");

insert into sugel.user values(1,'Sebastian_Sota','sebastiansota@utez.edu.mx',sha2('SebastianNA1',256),1,1);
insert into sugel.person values(1,'Sebastian','Sota','Garcia','SOGS040828MMSNNNA1',1);


insert into sugel.answer values(1,'Abierta');
insert into sugel.answer values(2,'Multiple');

insert into sugel.question values(1,'','');
insert into sugel.question values(2,'','');







